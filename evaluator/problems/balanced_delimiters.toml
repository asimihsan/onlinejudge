# ------------------------------------------------------------------------------
#   This is a problem for the onlinejudge platform. It is a single file that
#   represents the description, initial code, and unit tests for a single
#   problem.
#   
#   It is written in TOML. Please read: https://github.com/toml-lang/toml
#
#   To validate please execute:
#
#   go get github.com/BurntSushi/toml/cmd/tomlv
#   tomlv <path to TOML file>
# ------------------------------------------------------------------------------

# Do not change id once a problem is uploaded.
Id = "balanced_delimiters"

# Increment version every time you want to re-upload a problem. You should
# probably update last_updated_date if you increment the version.
Version = 18

Title = "Balanced Delimiters"
Category = "Strings"
SupportedLanguages = [
    "java",
    "javascript",
    "python",
]
CreationDate = 2015-02-11T00:00:00Z
LastUpdatedDate =  2015-02-11T00:00:00Z

# ------------------------------------------------------------------------------
# This is Markdown. To preview it use something like http://dillinger.io/.
#
# If you want one description for all languages specify a [Description._all]
#Â section. If there are language-specific descriptions, e.g.
# [Description.java] they will be used in preference to _all if it exists.
# ------------------------------------------------------------------------------
[Description]

[Description._all]

markdown = '''
## Balanced Delimiters

Credit for this problem goes to Austin Woo.

### Description

For this question, you will parse a string to determine if it contains only
"balanced delimiters."

A balanced delimiter starts with an opening character (`(`, `[`, `{`), ends
with a matching closing character (`)`, `]`, `}` respectively), and has only
other matching delimiters in between. A balanced delimiter may contain any
number of balanced delimiters.

Input is provided as a single string. Your output should be a boolean
(`True` or `False`) according to whether the string is balanced.

### Examples

The following are examples of balanced delimiter strings where your function
should return `True`:

```
()[]{}
([{}])
([]{})
```

The following are examples of invalid strings where your function should
return `False`:

```
([)]
([]
[])
([})
```

### Input Format and Restrictions

Each test case will consist of a string only containing the characters
`()[]{}`. The length of the string will not exceed 2KB and will contain at least
one character.
'''

[Description.java]

markdown = '''
## Balanced Delimiters

Credit for this problem goes to Austin Woo.

### Description

For this question, you will parse a string to determine if it contains only
"balanced delimiters."

A balanced delimiter starts with an opening character (`(`, `[`, `{`), ends
with a matching closing character (`)`, `]`, `}` respectively), and has only
other matching delimiters in between. A balanced delimiter may contain any
number of balanced delimiters.

Input is provided as a single string. Your output should be a boolean
(`true` or `false`) according to whether the string is balanced.

### Examples

The following are examples of balanced delimiter strings where your function
should return `true`:

```
()[]{}
([{}])
([]{})
```

The following are examples of invalid strings where your function should
return `false`:

```
([)]
([]
[])
([})
```

### Input Format and Restrictions

Each test case will consist of a string only containing the characters
`()[]{}`. The length of the string will not exceed 2KB and will contain at least
one character.
'''

[Description.javascript]

markdown = '''
## Balanced Delimiters

Credit for this problem goes to Austin Woo.

### Description

For this question, you will parse a string to determine if it contains only
"balanced delimiters."

A balanced delimiter starts with an opening character (`(`, `[`, `{`), ends
with a matching closing character (`)`, `]`, `}` respectively), and has only
other matching delimiters in between. A balanced delimiter may contain any
number of balanced delimiters.

Input is provided as a single string. Your output should be a boolean
(`true` or `false`) according to whether the string is balanced.

### Examples

The following are examples of balanced delimiter strings where your function
should return `true`:

```
()[]{}
([{}])
([]{})
```

The following are examples of invalid strings where your function should
return `false`:

```
([)]
([]
[])
([})
```

### Input Format and Restrictions

Each test case will consist of a string only containing the characters
`()[]{}`. The length of the string will not exceed 2KB and will contain at least
one character.
'''
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Initial code is presented to the user at the start of the problem. It should
# give them the function signature (or, if the function signature gives away
# the problem, sufficient language-specific comments to understand what is
# required).
# ------------------------------------------------------------------------------
[InitialCode]

[InitialCode.python]
code = '''
def are_delimiters_balanced(input):
    return True
'''

[InitialCode.java]
code = '''
import java.util.*;
import java.io.*;

public class Solution {
    public static boolean are_delimiters_balanced(String input) {
        return true;
    }
}
'''

[InitialCode.javascript]
code = '''
exports.are_delimiters_balanced = function(input) {
  return true;
};
'''
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Unit tests are used by the server to verify the validity of answers.
# - Their code is never revealed to the user.
# - Their stdout must not reveal the inputs used in tests.
# - Their stdout may reveal the outputs used in tests (just like normal unit
#   tests).
#
# Code is written out to one file, unit tests to another, and the two files are
# compiled (if necessary) then the unit test file is executed. The names are:
# - Java: Solution.java / SolutionTest.java
# - Python: foo.py / foo_test.py
#
# How we run in each language:
#
# - Java:
#   javac -cp '.:/tmp/junit-4.12.jar:/tmp/hamcrest-core-1.3.jar' Solution.java SolutionTest.java
#   java -cp '.:/tmp/junit-4.12.jar:/tmp/hamcrest-core-1.3.jar' SolutionTest
#   (need junit and hamcrest JARs)
#
# - Python:
#   python foo_test.py
# ------------------------------------------------------------------------------
[UnitTest]

[UnitTest.python]
code = '''
import unittest

import foo


class TestFizzBuzz(unittest.TestCase):
    def test1(self):
        self.assertTrue(foo.are_delimiters_balanced('()[]{}'))

    def test2(self):
        self.assertTrue(foo.are_delimiters_balanced('([{}])'))

    def test3(self):
        self.assertTrue(foo.are_delimiters_balanced('([]{})'))

    def test4(self):
        self.assertFalse(foo.are_delimiters_balanced('([)]'))

    def test5(self):
        self.assertFalse(foo.are_delimiters_balanced('([]'))

    def test6(self):
        self.assertFalse(foo.are_delimiters_balanced('[])'))

    def test7(self):
        self.assertFalse(foo.are_delimiters_balanced('([})'))

    def test8(self):
        self.assertFalse(foo.are_delimiters_balanced(')'))

    def test9(self):
        self.assertFalse(foo.are_delimiters_balanced('('))

if __name__ == '__main__':
    unittest.main(verbosity=2)
'''

[UnitTest.java]
code = '''
import java.util.*;
import java.io.*;
import org.junit.*;
import static org.junit.Assert.*;

public class SolutionTest {
    @Test
    public void test1() {
        assertTrue(Solution.are_delimiters_balanced("()[]{}"));
    }

    @Test
    public void test2() {
        assertTrue(Solution.are_delimiters_balanced("([{}])"));
    }

    @Test
    public void test3() {
        assertTrue(Solution.are_delimiters_balanced("([]{})"));
    }

    @Test
    public void test4() {
        assertFalse(Solution.are_delimiters_balanced("([)]"));
    }

    @Test
    public void test5() {
        assertFalse(Solution.are_delimiters_balanced("([]"));
    }

    @Test
    public void test6() {
        assertFalse(Solution.are_delimiters_balanced("[])"));
    }

    @Test
    public void test7() {
        assertFalse(Solution.are_delimiters_balanced("([})"));
    }

    @Test
    public void test8() {
        assertFalse(Solution.are_delimiters_balanced(")"));
    }

    @Test
    public void test9() {
        assertFalse(Solution.are_delimiters_balanced("("));
    }

    public static void main(String[] args) {
        org.junit.runner.JUnitCore.main("SolutionTest");
    }
}
'''

[UnitTest.javascript]
code = '''
var foo = require('./foo');

exports.test1 = function(test) {
  test.strictEqual(foo.are_delimiters_balanced("()[]{}"), true);
  test.done();
}

exports.test2 = function(test) {
  test.strictEqual(foo.are_delimiters_balanced("([{}])"), true);
  test.done();
}

exports.test3 = function(test) {
  test.strictEqual(foo.are_delimiters_balanced("([]{})"), true);
  test.done();
}

exports.test4 = function(test) {
  test.strictEqual(foo.are_delimiters_balanced("([)]"), false);
  test.done();
}

exports.test5 = function(test) {
  test.strictEqual(foo.are_delimiters_balanced("([]"), false);
    test.done();
}

exports.test6 = function(test) {
  test.strictEqual(foo.are_delimiters_balanced("[])"), false);
test.done();
}

exports.test7 = function(test) {
  test.strictEqual(foo.are_delimiters_balanced("([})"), false);
  test.done();
}

exports.test8 = function(test) {
  test.strictEqual(foo.are_delimiters_balanced(")"), false);
  test.done();
}

exports.test9 = function(test) {
  test.strictEqual(foo.are_delimiters_balanced("("), false);
  test.done();
}
'''
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# When we first launch there won't by any solutions. These solutions will seed
# the voted list of solutions (might not be the best solutions!)
# ------------------------------------------------------------------------------
[Solution]

[Solution.python]
code = '''
import collections

def are_delimiters_balanced(input):
    stack = collections.deque()
    pairs = {
        '(': ')',
        '{': '}',
        '[': ']',
    }
    for c in input:
        if c in pairs:
            stack.appendleft(c)
        elif len(stack) == 0 or c != pairs[stack.popleft()]:
            return False
    return len(stack) == 0
'''

[Solution.java]
code = '''
import java.util.*;
import java.io.*;

public class Solution {
    private static final Map<Character, Character> pairs = new HashMap<>();
    static {
        pairs.put('{', '}');
        pairs.put('(', ')');
        pairs.put('[', ']');
    }
    public static boolean are_delimiters_balanced(final String input) {
        final Deque<Character> stack = new ArrayDeque<>();
        for (int i = 0; i < input.length(); i++) {
            final Character c = input.charAt(i);
            if (pairs.containsKey(c)) {
                stack.push(c);
            } else if (stack.size() == 0 || !pairs.get(stack.pop()).equals(c)) {
                return false;
            }
        }
        return stack.size() == 0;
    }
}
'''

[Solution.javascript]
code = '''
exports.are_delimiters_balanced = function(input) {
    var pairs = {
        '{': '}',
        '(': ')',
        '[': ']'
    };
    var stack = [];
    for (var i = 0, len = input.length; i < len; i++) {
        var c = input[i];
        if (c in pairs) {
            stack.push(c);
        } else if (stack.length === 0 || pairs[stack.pop()] !== c) {
            return false;
        }
    }
    return stack.length === 0;
}
'''
# ------------------------------------------------------------------------------
