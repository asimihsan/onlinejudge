# ------------------------------------------------------------------------------
#   This is a problem for the onlinejudge platform. It is a single file that
#   represents the description, initial code, and unit tests for a single
#   problem.
#   
#   It is written in TOML. Please read: https://github.com/toml-lang/toml
#
#   To validate please execute:
#
#   go get github.com/BurntSushi/toml/cmd/tomlv
#   tomlv <path to TOML file>
# ------------------------------------------------------------------------------

# Do not change id once a problem is uploaded.
Id = "fizz_buzz"

# Increment version every time you want to re-upload a problem. You should
# probably update last_updated_date if you increment the version.
Version = 7

Title = "Fizz Buzz"
SupportedLanguages = [
    #"java",
    "python",
]
CreationDate = 2014-02-07T00:00:00Z
LastUpdatedDate =  2014-02-07T00:00:00Z

# ------------------------------------------------------------------------------
# This is Markdown. To preview it use something like http://dillinger.io/.
#
# If you want one description for all languages specify a [Description._all]
#Â section. If there are language-specific descriptions, e.g.
# [Description.java] they will be used in preference to _all if it exists.
# ------------------------------------------------------------------------------
[Description]

[Description._all]

markdown = '''
## Fizz Buzz

### Description

Write a function that accepts one positive integer (i.e. starting at 1) and,
for all positive integers (i.e. starting at 1) ending at that integer
(inclusive), print out:

-   'fizz' if that number is divisible by 2
-   'buzz' if that number is divisible by 3
-   'fizz buzz' if that number is divisible by both 2 and 3
-   'ping' if that number is not divisible by either 2 or 3

### Examples

Given 7 you should print out:

```
ping
fizz
buzz
fizz
ping
fizz buzz
ping
```
'''
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Initial code is presented to the user at the start of the problem. It should
# give them the function signature (or, if the function signature gives away
# the problem, sufficient language-specific comments to understand what is
# required).
# ------------------------------------------------------------------------------
[InitialCode]

[InitialCode.python]
code = '''
def fizz_buzz(n):
    pass
'''

[InitialCode.java]
code = '''
import java.util.*;
import java.io.*;

public class Solution {
    public static void fizz_buzz(int n) {

    }
}
'''
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Unit tests are used by the server to verify the validity of answers.
# - Their code is never revealed to the user.
# - Their stdout must not reveal the inputs used in tests.
# - Their stdout may reveal the outputs used in tests (just like normal unit
#   tests).
#
# Code is written out to one file, unit tests to another, and the two files are
# compiled (if necessary) then the unit test file is executed. The names are:
# - Java: Solution.java / SolutionTest.java
# - Python: foo.py / foo_test.py
#
# How we run in each language:
#
# - Java:
#   javac -cp '.:/tmp/junit-4.12.jar:/tmp/hamcrest-core-1.3.jar' Solution.java SolutionTest.java
#   java -cp '.:/tmp/junit-4.12.jar:/tmp/hamcrest-core-1.3.jar' SolutionTest
#   (need junit and hamcrest JARs)
#
# - Python:
#   python foo_test.py
# ------------------------------------------------------------------------------
[UnitTest]

[UnitTest.python]
code = '''
from cStringIO import StringIO
import sys
import unittest

import foo


class TestFizzBuzz(unittest.TestCase):
    test1_output = """ping
fizz
buzz
fizz
ping
fizz buzz
ping"""

    def setUp(self):
        self.saved_stdout = sys.stdout
        sys.stdout = StringIO()

    def test1(self):
        foo.fizz_buzz(7)
        self.assertEqual(self.test1_output, sys.stdout.getvalue().strip())

    def tearDown(self):
        sys.stdout = self.saved_stdout

if __name__ == '__main__':
    unittest.main(verbosity=2)
'''

[UnitTest.java]
code = '''
import java.util.*;
import java.io.*;
import org.junit.*;
import static org.junit.Assert.*;

public class SolutionTest {
    private final ByteArrayOutputStream outContent =
        new ByteArrayOutputStream();
    private final String test1_output =
        "ping\nfizz\nbuzz\nfizz\nping\nfizz buzz\nping";

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
    }

    @After
    public void cleanUpStreams() {
        System.setOut(null);
    }

    @Test
    public void test1() {
        Solution.fizz_buzz(7);
        assertEquals(test1_output, outContent.toString().trim());
    }

    public static void main(String[] args) {
        org.junit.runner.JUnitCore.main("SolutionTest");
    }
}
'''
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# When we first launch there won't by any solutions. These solutions will seed
# the voted list of solutions (might not be the best solutions!)
# ------------------------------------------------------------------------------
[Solution]

[Solution.python]
code = '''
def fizz_buzz(n):
    for i in xrange(1, n + 1):
        if i % 6 == 0:
            print('fizz buzz')
        elif i % 3 == 0:
            print('buzz')
        elif i % 2 == 0:
            print('fizz')
        else:
            print('ping')
'''

[Solution.java]
code = '''
public class Solution {
    public static void fizz_buzz(int n) {
        for (int i = 1; i <= n; i++) {
            if (i % 6 == 0) {
                System.out.println("fizz buzz");
            } else if (i % 3 == 0) {
                System.out.println("buzz");
            } else if (i % 2 == 0) {
                System.out.println("fizz");
            } else {
                System.out.println("ping");
            }
        }
    }
}
'''
# ------------------------------------------------------------------------------
