# ------------------------------------------------------------------------------
#   This is a problem for the onlinejudge platform. It is a single file that
#   represents the description, initial code, and unit tests for a single
#   problem.
#   
#   It is written in TOML. Please read: https://github.com/toml-lang/toml
#
#   To validate please execute:
#
#   go get github.com/BurntSushi/toml/cmd/tomlv
#   tomlv <path to TOML file>
# ------------------------------------------------------------------------------

# Do not change id once a problem is uploaded.
Id = "longest_substring_palindrome"

# Increment version every time you want to re-upload a problem. You should
# probably update last_updated_date if you increment the version.
Version = 3

Title = "Longest Substring That Is A Palindrome"
Category = "Strings"
SupportedLanguages = [
    "java",
    "python",
]
CreationDate = 2015-03-31T00:00:00Z
LastUpdatedDate =  2015-06-07T00:00:00Z

# ------------------------------------------------------------------------------
# This is Markdown. To preview it use something like http://dillinger.io/.
#
# If you want one description for all languages specify a [Description._all]
#Â section. If there are language-specific descriptions, e.g.
# [Description.java] they will be used in preference to _all if it exists.
# ------------------------------------------------------------------------------
[Description]

[Description._all]
markdown = '''
## Longest substring that is a palindrome

### Description

Return the longest substring that is also a palindrome from an input string. If
no such palindrome exists return an empty string. If there is more than one
longest palindrome of a given size return any one of them.

### Examples

-   `"abadd"` would return `"aba"`
'''
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Initial code is presented to the user at the start of the problem. It should
# give them the function signature (or, if the function signature gives away
# the problem, sufficient language-specific comments to understand what is
# required).
# ------------------------------------------------------------------------------
[InitialCode]

[InitialCode.python]
code = '''
def longest_substring_palindrome(input):
    return ""
'''

[InitialCode.java]
code = '''
import java.util.*;
import java.io.*;

public class Solution {
    public static String longestSubstringPalindrome(final String input) {
        return "";
    }
}
'''
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Unit tests are used by the server to verify the validity of answers.
# - Their code is never revealed to the user.
# - Their stdout must not reveal the inputs used in tests.
# - Their stdout may reveal the outputs used in tests (just like normal unit
#   tests).
#
# Code is written out to one file, unit tests to another, and the two files are
# compiled (if necessary) then the unit test file is executed. The names are:
# - Java: Solution.java / SolutionTest.java
# - Python: foo.py / foo_test.py
#
# How we run in each language:
#
# - Java:
#   javac -cp '.:/tmp/junit-4.12.jar:/tmp/hamcrest-core-1.3.jar' Solution.java SolutionTest.java
#   java -cp '.:/tmp/junit-4.12.jar:/tmp/hamcrest-core-1.3.jar' SolutionTest
#   (need junit and hamcrest JARs)
#
# - Python:
#   python foo_test.py
# ------------------------------------------------------------------------------
[UnitTest]

[UnitTest.java]
code = '''
import java.util.*;
import java.io.*;
import org.junit.*;
import static org.junit.Assert.*;

public class SolutionTest {
    @Test
    public void test1() {
        assertEquals("aba", Solution.longestSubstringPalindrome("abadd"));
    }

    @Test
    public void test2() {
        assertEquals("", Solution.longestSubstringPalindrome(""));
    }

    @Test
    public void test3() {
        assertEquals("a", Solution.longestSubstringPalindrome("a"));
    }

    @Test
    public void test4() {
        assertEquals("aa", Solution.longestSubstringPalindrome("aa"));
    }

    @Test
    public void test5() {
        assertEquals("aa", Solution.longestSubstringPalindrome("aab"));
    }

    @Test
    public void test6() {
        assertEquals("aa", Solution.longestSubstringPalindrome("baa"));
    }

    @Test
    public void test7() {
        assertEquals("ddd", Solution.longestSubstringPalindrome("abcdddabc"));
    }

    @Test
    public void test8() {
        assertEquals("ddd", Solution.longestSubstringPalindrome("abcddd"));
    }

    public static void main(String[] args) {
        org.junit.runner.JUnitCore.main("SolutionTest");
    }
}
'''

[UnitTest.python]
code = '''
import unittest

import foo


class TestLongestPalindrome(unittest.TestCase):
    def test1(self):
        self.assertEqual('aba', foo.longest_substring_palindrome('abadd'))

    def test2(self):
        self.assertEqual('', foo.longest_substring_palindrome(''))

    def test3(self):
        self.assertEqual('a', foo.longest_substring_palindrome('a'))

    def test4(self):
        self.assertEqual('aa', foo.longest_substring_palindrome('aa'))

    def test5(self):
        self.assertEqual('aa', foo.longest_substring_palindrome('aab'))

    def test6(self):
        self.assertEqual('aa', foo.longest_substring_palindrome('baa'))

    def test7(self):
        self.assertEqual('ddd', foo.longest_substring_palindrome('abcdddabc'))

    def test8(self):
        self.assertEqual('ddd', foo.longest_substring_palindrome('abcdddabc'))


if __name__ == '__main__':
    unittest.main(verbosity=2)
'''
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# When we first launch there won't by any solutions. These solutions will seed
# the voted list of solutions (might not be the best solutions!)
# ------------------------------------------------------------------------------
[Approach]

[Approach._all]
markdown = '''
'''

[Solution]

[Solution.java]
code = '''
import java.util.*;
import java.io.*;

public class Solution {
    public static String longestSubstringPalindrome(final String input) {
        String longestPalindrome = "";
        for (int i = 0, j, k; i <= 2 * input.length() + 1; i++) {
            if (i % 2 == 0) {
                // in between characters, so ignore "" case
                j = (i - 1) / 2;
                k = i / 2;
            } else {
                // on a character, so start with that character
                j = (i - 1) / 2;
                k = (i - 1) / 2;
            }
            while (j >= 0 && k < input.length()) {
                final String substring = input.substring(j, k + 1);
                if (substring.charAt(0) != substring.charAt(substring.length() - 1)) {
                    break;
                }
                if (substring.length() > longestPalindrome.length()) {
                    longestPalindrome = substring;
                }
                j--;
                k++;
            }
        }
        return longestPalindrome;
    }
}
'''

[Solution.python]
code = '''
import itertools

def longest_substring_palindrome(input):
    """
    Expanding from all possible centers is equivalent to expanding from
    all possible single characters and adjacent pairs of characters. For
    example, "aba" means expanding from ["a", "ab", "b", "ba", "a"]. For
    simplicity we expand from single characters, then pairs.

    Rather than create a list of indices to loop over in-memory, we iterate over
    a generator of indices.
    """
    longest = ""

    def get_indices(i):
        yield (i, i)
        yield (i, i + 1)
    indices = (itertools.chain.from_iterable(get_indices(i)
               for i in xrange(len(input))))
    for (start, end) in indices:
        while start >= 0 and end < len(input):
            substring = input[start:end+1]
            if substring[0] != substring[-1]:
                break
            if len(substring) > len(longest):
                longest = substring
            start -= 1
            end += 1
    return longest
'''
# ------------------------------------------------------------------------------
